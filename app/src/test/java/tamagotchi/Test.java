/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tamagotchi;

import org.junit.jupiter.api.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
class AppTest {
	@Test
	void startNewGameElemental() throws IOException, ClassNotFoundException {
		String name = "TESTstartAppelemental";
		System.setIn(new ByteArrayInputStream(("elemental\n"+name+"\n").getBytes()));
		App.startNewGame();
		Pet pet = App.loadGame(name);
		assertEquals(name,pet.name_);
		assertEquals("steak",pet.getFavoriteFood());
	}
	@Test
	void startNewGame() throws IOException, ClassNotFoundException {
		String name = "TESTstartAppcat";
		System.setIn(new ByteArrayInputStream(("cat\n" + name + "\n").getBytes()));
		App.startNewGame();
		Pet pet = App.loadGame(name);
		assertEquals(name,pet.name_);
		assertEquals("tuna",pet.getFavoriteFood());
	}

	@Test
	void PlayAppCatFeedNormalFood() throws IOException {
		System.setIn(new ByteArrayInputStream(("feed\napple\nclose\n").getBytes()));
		Pet cat = new Dragon("PlayGameCatFeedNormalFood");
		App.startGame(cat);

		assertEquals(4,cat.hunger_);
		assertEquals(5,cat.attention_);
		assertEquals(7,cat.hygiene_);
	}
	@Test
	void PlayAppCatFeedFavoriteFood() throws IOException {
		System.setIn(new ByteArrayInputStream(("feed\ntuna\nclose\n").getBytes()));
		Pet cat = new Dragon("PlayAppCatFeedFavoriteFood");
		App.startGame(cat);

		assertEquals(1,cat.hunger_);
		assertEquals(4,cat.attention_);
		assertEquals(7,cat.hygiene_);
	}
	@Test
	void PlayAppElementalFeedFavoriteFood() throws IOException {
		System.setIn(new ByteArrayInputStream(("feed\nsteak\nclose\n").getBytes()));
		Pet elemental = new Elemental("PlayAppElementalFeedFavoriteFood");
		App.startApp(elemental);

		assertEquals(1,elemental.hunger);
		assertEquals(4,elemental.boredom);
		assertEquals(7,elemental.dirtiness);
	}
	@Test
	void PlayAppCatCleanToilet() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\ntoilet\nclose\n").getBytes()));
		Pet cat = new Cat("PlayAppCatCleanToilet");
		App.startApp(cat);

		assertEquals(2,cat.dirtiness);
	}
	@Test
	void PlayAppCatCleanBath() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nbath\nclose\n").getBytes()));
		Pet cat = new Cat("PlayAppCatCleanBath");
		App.startApp(cat);

		assertEquals(2,cat.dirtiness);
	}
	@Test
	void PlayAppCatCleanGrooming() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\ngrooming\nclose\n").getBytes()));
		Pet cat = new Cat("PlayAppCatCleanGrooming");
		App.startApp(cat);

		assertEquals(2,cat.dirtiness);
	}
	@Test
	void PlayAppCatCleanBack() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nback\nclose\n").getBytes()));
		Pet cat = new Cat("PlayAppCatCleanBath");
		App.startApp(cat);

		assertEquals(5,cat.dirtiness);
	}
	@Test
	void PlayAppElementalSleepingClose() throws IOException {//TODO how do i do this
		System.setIn(new ByteArrayInputStream(("sleep\nyes\nclose\n").getBytes()));
		Pet elemental = new Elemental("PlayAppElementalSleepingClose");
		//App.startApp(elemental);
	}

	@Test
	void PlayAppElementalSleepingWakeUp() throws IOException {
		System.setIn(new ByteArrayInputStream(("sleep\nyes\nclose\nwake up\nclose\n").getBytes()));
		Pet elemental = new Elemental("PlayAppElementalSleepingWakeUp");
		App.startApp(elemental);
		assertEquals(3,elemental.boredom);
		assertEquals(6,elemental.hunger);
	}
	@Test
	void REVIVE() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nbath\nclose\n").getBytes()));
		Pet elemental = new Elemental("REVIVE");

		elemental.hunger_ = 10;
		elemental.boredom_ = 10;
		elemental.dirtiness_ = 10;
		elemental.check_death();

		App.startApp(elemental);
		assertEquals(10,elemental.dirtiness);
	}

	@Test
	void readwriteFileTest() throws IOException, ClassNotFoundException {
		String name = "readwriteFileTest";
		Pet testelemental = new Elemental(name);
		App.write_file(testelemental);
		Pet pet = App.read_file(name);
		assertEquals(name,pet.name_);
		assertEquals("steak",pet.favoriteFood.name);
	}

	@Test
	void PlayAppElementalSleepingBack() throws IOException {
		System.setIn(new ByteArrayInputStream(("sleep\nyes\nclose\nback\nclose\nwake up\nyes\nclose\n").getBytes()));
		Pet elemental = new Elemental("PlayAppElementalSleepingBack");
		throw new org.opentest4j.AssertionFailedError(" App is in infinite loop. this line can be removed, when problem is resolved");
		//App.startApp(elemental); // this statement creates infinite loop
	}
}
class FoodTest {
	@Test
	void TestApple(){
		String name = "apple";
		int energy = 1;
		Apple apple = new Apple();

		assertEquals(name, apple.name);
		assertEquals(energy, apple.energy);
	}
	@Test
	void TestBread(){
		String name = "bread";
		int energy = 3;
		Bread bread = new Bread();

		assertEquals(name, bread.name);
		assertEquals(energy, bread.energy);
	}
	@Test
	void TestSteak(){
		String name = "steak";
		int energy = 4;
		Steak steak = new Steak();

		assertEquals(name, steak.name);
		assertEquals(energy, steak.energy);
	}
	@Test
	void TestTuna(){
		String name = "tuna";
		int energy = 4;
		Tuna tuna = new Tuna();

		assertEquals(name, tuna.name);
		assertEquals(energy, tuna.energy);
	}
}

class TestToy {
	@Test
	void TestBall(){
		String name = "Ball";
		int fun = 3;
		Ball ball = new Ball();

		assertEquals(name, ball.name);
		assertEquals(fun, ball.fun);
	}
	@Test
	void TestStick(){
		String name = "Stick";
		int fun = 1;
		Stick stick = new Stick();

		assertEquals(name, stick.name);
		assertEquals(fun, stick.fun);
	}
	@Test
	void TestYarn(){
		String name = "Yarn";
		int fun = 2;
		Yarn yarn = new Yarn();

		assertEquals(name, yarn.name);
		assertEquals(fun, yarn.fun);
	}
}

class TestPet {
	@Test
	void TestElemental(){
		Elemental elemental = new Elemental("elemental");
		assertEquals("elemental", elemental.name);
		assertEquals(new Steak().name, elemental.favoriteFood.name);
		assertEquals(new Ball().name, elemental.favoriteToy.name);
		assertEquals(5, elemental.hunger);
		assertEquals(5, elemental.boredom);
		assertEquals(5, elemental.dirtiness);
	}
	@Test
	void TestCat(){
		Cat cat = new Cat("cattt");
		assertEquals("cattt", cat.name);
		assertEquals(new Tuna().name, cat.favoriteFood.name);
		assertEquals(new Yarn().name, cat.favoriteToy.name);
		assertEquals(5, cat.hunger);
		assertEquals(5, cat.boredom);
		assertEquals(5, cat.dirtiness);
	}
	@Test
	void TestFeed(){
		Cat cat = new Cat("cattt");
		cat.feed(new Tuna());
		assertEquals(1, cat.hunger);
		assertEquals(4, cat.boredom); 		//vergleich von pointer und nicht strings in if()
		assertEquals(7, cat.dirtiness);

		cat.feed(new Steak());
		assertEquals(0, cat.hunger);
		assertEquals(4, cat.boredom);
		assertEquals(9, cat.dirtiness);
	}
	@Test
	void TestClean(){
		Cat cat = new Cat("cattt");
		cat.clean("");					//why parameter??
		assertEquals(2, cat.dirtiness);
		assertEquals(5, cat.hunger);
		assertEquals(5, cat.boredom);
	}
	@Test
	void TestPlay(){
		Cat cat = new Cat("cattt");
		do {
			System.setIn(new ByteArrayInputStream(("left\nno\nclose\n").getBytes()));
			cat.play(new Yarn());
		} while (cat.boredom == 5);
		assertEquals(1, cat.boredom);
	}
}
class TestTime {
	@Test
	void TestTime(){
		Time time1 = new Time(5, 12, 55);

		assertEquals(5, time1.days_);
		assertEquals(12, time1.hours_);
		assertEquals(55, time1.minutes_);
	}
}