/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tamagotchi;

import org.junit.jupiter.api.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
class AppTest {
	@Test
	void startNewAppElemental() throws IOException, ClassNotFoundException {
		String name = "TESTStartGameElemental";
		System.setIn(new ByteArrayInputStream(("elemental\n"+name+"\nfemale\n").getBytes()));
		App.startNewGame();
		Pet pet = App.loadGame(name);
		String favFood = pet.getFavoriteFood();
		assertEquals(name,pet.name_);
		assertEquals(favFood,pet.getFavoriteFood());
		assertEquals("female",pet.sex_);
	}
	@Test
	void startNewGameDragon() throws IOException, ClassNotFoundException {
		String name = "TESTStartGameDragon";
		System.setIn(new ByteArrayInputStream(("dragon\nTESTStartGameDragon\nmale\n").getBytes()));
		App.startNewGame();

		Pet pet = App.loadGame(name);
		String favFood = pet.getFavoriteFood();

		assertEquals(name,pet.name_);
		assertEquals(favFood,pet.getFavoriteFood());
		assertEquals("male",pet.sex_);
	}

	@Test
	void PlayAppDragonFeedNormalFood() throws IOException {
		System.setIn(new ByteArrayInputStream(("feed\napple\nclose\n").getBytes()));
		Pet cat = new Dragon("PlayGameDragonFeedNormalFood","female");

		cat.set_hunger(5.0f);
		cat.set_hygiene(5.0f);
		cat.set_attention(5.0f);

		App.startGame(cat);
		if ("apple".equals(cat.getFavoriteFood())){
			assertEquals(10.0f,cat.hunger_);
			assertEquals(6.0f,cat.attention_);
		}else {
			assertEquals(8.0f, cat.hunger_);
			assertEquals(5.0f,cat.attention_);
		}
		assertEquals(3.0f,cat.hygiene_);
	}
	@Test
	void PlayAppDragonFeedFavoriteFood() throws IOException {
		Pet cat = new Dragon("PlayGameDragonFeedFavoriteFood","male");
		System.setIn(new ByteArrayInputStream(("feed\n"+cat.getFavoriteFood()+"\nclose\n").getBytes()));

		cat.set_hunger(5.0f);
		cat.set_hygiene(5.0f);
		cat.set_attention(5.0f);

		App.startGame(cat);

		assertEquals(10.0f,cat.hunger_);
		assertEquals(6.0f,cat.attention_);
		assertEquals(3.0f,cat.hygiene_);
	}
	@Test
	void PlayAppElementalFeedFavoriteFood() throws IOException {
		Pet elemental = new Elemental("PlayGameElementalFeedFavoriteFood","male");
		String favFood = elemental.getFavoriteFood();
		System.out.println(favFood);
		System.setIn(new ByteArrayInputStream(("feed\n"+favFood+"\nclose\n").getBytes()));

		elemental.set_hunger(5.0f);
		elemental.set_hygiene(5.0f);
		elemental.set_attention(5.0f);

		App.startGame(elemental);

		assertEquals(10.0f,elemental.hunger_);
		assertEquals(6.0f,elemental.attention_);
		assertEquals(3.0f,elemental.hygiene_);
	}
	@Test
	void PlayAppCatCleanToilet() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\ntoilet\nclose\n").getBytes()));
		Pet dragon = new Dragon("PlayGameDragonCleanToilet","male");
		App.startGame(dragon);

		assertEquals(2,dragon.hygiene_);
	}
	@Test
	void PlayAppCatCleanBath() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nbath\nclose\n").getBytes()));
		Pet cat = new Dragon("PlayGameDragonCleanBath","male");
		cat.set_hygiene(5.0f);
		App.startGame(cat);

		assertEquals(8.0f,cat.hygiene_);
	}
	@Test
	void PlayAppCatCleanGrooming() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\ngrooming\nclose\n").getBytes()));
		Pet cat = new Dragon("PlayGameDragonCleanGrooming","male");
		cat.set_hunger(5.0f);
		App.startGame(cat);

		assertEquals(8.0f,cat.hygiene_);
	}
	@Test
	void PlayAppCatCleanBack() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nback\nclose\n").getBytes()));
		Pet cat = new Dragon("PlayGameDragonCleanBath","male");
		cat.set_hygiene(5.0f);
		App.startGame(cat);

		assertEquals(5.0f,cat.hygiene_);
	}
	@Test
	void PlayAppElementalSleepingClose() throws IOException {
		System.setIn(new ByteArrayInputStream(("sleep\n").getBytes()));
		Pet elemental = new Elemental("PlayGameElementalSleepingClose","female");
		App.startGame(elemental);
	}
	@Test
	void REVIVE() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nbath\nclose\n").getBytes()));
		Pet elemental = new Elemental("Jesus","male");

		elemental.hunger_ = 0;
		elemental.attention_ = 0;
		elemental.hygiene_ = 0;
		elemental.check_death();

		App.startGame(elemental);
		assertEquals(0,elemental.health_);
	}

	@Test
	void readwriteFileTest() throws IOException, ClassNotFoundException {
		FileOrganizer fileOrganizer = new FileOrganizer();
		String name = "readwriteFileTest";
		Pet testElemental = new Elemental(name,"female");

		fileOrganizer.write_file(testElemental);
		Pet pet = App.loadGame(name);
		assertEquals(name,pet.name_);
		String favFood = testElemental.getFavoriteFood();
		assertEquals(favFood,pet.getFavoriteFood());
	}

	@Test
	void PlayAppElementalSleepingBack() throws IOException {
		System.setIn(new ByteArrayInputStream(("sleep\nyes\nclose\nback\nclose\nwake up\nyes\nclose\n").getBytes()));
		Pet elemental = new Elemental("PlayGameElementalSleepingBack","male");
		//throw new org.opentest4j.AssertionFailedError(" App is in infinite loop. this line can be removed, when problem is resolved");
		App.startGame(elemental); // this statement creates infinite loop
	}
}

class TestPet {
	@Test
	void TestElemental(){
		Elemental elemental = new Elemental("elemental","male");
		assertEquals("elemental", elemental.name_);
		String favFood = elemental.getFavoriteFood();
		String favToy = elemental.getFavoriteToy();
		assertEquals(favFood, elemental.getFavoriteFood());
		assertEquals(favToy, elemental.getFavoriteToy());
		assertEquals(8.0f, elemental.hunger_);
		assertEquals(8.0f, elemental.attention_);
		assertEquals(8.0f, elemental.hygiene_);
	}
	@Test
	void TestCat(){
		Dragon cat = new Dragon("cattt","female");
		assertEquals("cattt", cat.name_);
		String favFood = cat.getFavoriteFood();
		String favToy = cat.getFavoriteToy();
		assertEquals(favFood, cat.getFavoriteFood());
		assertEquals(favToy, cat.getFavoriteToy());
		assertEquals(8.0f, cat.hunger_);
		assertEquals(8.0f, cat.attention_);
		assertEquals(8.0f, cat.hygiene_);
	}
	@Test
	void TestFeed(){
		Dragon cat = new Dragon("cattt","female");
		cat.set_hunger(5.0f);
		cat.set_hygiene(5.0f);
		cat.set_attention(5.0f);
		String favFood = cat.getFavoriteFood();
		cat.feed(favFood);
		assertEquals(10.0f, cat.hunger_);
		assertEquals(6.0f, cat.attention_); 		//vergleich von pointer und nicht strings in if()
		assertEquals(3.0f, cat.hygiene_);

		for (String food: cat.food){
			if (!food.equals(favFood)){
				favFood=food;
				break;
			}
		}
		cat.set_hunger(5.0f);
		cat.feed(favFood);
		assertEquals(8.0f, cat.hunger_);
		assertEquals(6.0f, cat.attention_);
		assertEquals(1.0f, cat.hygiene_);
	}

	@Test
	void TestClean(){
		Dragon cat = new Dragon("cattt","female");
		cat.set_hunger(5.0f);
		cat.set_hygiene(5.0f);
		cat.set_attention(5.0f);

		cat.clean("");	//why parameter??
		assertEquals(8, cat.hygiene_);
		assertEquals(5, cat.hunger_);
		assertEquals(5, cat.attention_);
	}
	@Test
	void TestPlay(){
		Dragon cat = new Dragon("cattt","female");
		cat.set_hunger(5.0f);
		cat.set_hygiene(5.0f);
		cat.set_attention(5.0f);
		String favtoy = cat.getFavoriteToy();
		cat.play(favtoy);

		assertEquals(10.0f, cat.attention_);
	}
}
class TestTime {
	@Test
	void TestTime(){
		Time time1 = new Time(5, 12, 55);

		assertEquals(5, time1.days_);
		assertEquals(12, time1.hours_);
		assertEquals(55, time1.minutes_);
	}
}