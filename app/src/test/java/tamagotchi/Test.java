/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tamagotchi;

import org.junit.jupiter.api.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
class GameTest {
	@Test
	void startNewGamedog() throws IOException, ClassNotFoundException {
		String name = "TESTstartGamedog";
		System.setIn(new ByteArrayInputStream(("dog\n"+name+"\n").getBytes()));
		Game.startNewGame();
		Pet pet = Game.read_file(name);
		assertEquals(name,pet.name);
		assertEquals("steak",pet.favoriteFood.name);
	}
	@Test
	void startNewGamecat() throws IOException, ClassNotFoundException {
		String name = "TESTstartGamecat";
		System.setIn(new ByteArrayInputStream(("cat\n" + name + "\n").getBytes()));
		Game.startNewGame();
		Pet pet = Game.read_file(name);
		assertEquals(name,pet.name);
		assertEquals("tuna",pet.favoriteFood.name);
	}

	@Test
	void PlayGameCatFeedNormalFood() throws IOException {
		System.setIn(new ByteArrayInputStream(("feed\napple\nclose\n").getBytes()));
		Pet cat = new Cat("PlayGameCatFeedNormalFood");
		Game.startGame(cat);

		assertEquals(4,cat.hunger);
		assertEquals(5,cat.boredom);
		assertEquals(7,cat.dirtiness);
	}
	@Test
	void PlayGameCatFeedFavoriteFood() throws IOException {
		System.setIn(new ByteArrayInputStream(("feed\ntuna\nclose\n").getBytes()));
		Pet cat = new Cat("PlayGameCatFeedFavoriteFood");
		Game.startGame(cat);

		assertEquals(1,cat.hunger);
		assertEquals(4,cat.boredom);
		assertEquals(7,cat.dirtiness);
	}
	@Test
	void PlayGameDogFeedFavoriteFood() throws IOException {
		System.setIn(new ByteArrayInputStream(("feed\nsteak\nclose\n").getBytes()));
		Pet dog = new Dog("PlayGameDogFeedFavoriteFood");
		Game.startGame(dog);

		assertEquals(1,dog.hunger);
		assertEquals(4,dog.boredom);
		assertEquals(7,dog.dirtiness);
	}
	@Test
	void PlayGameCatCleanToilet() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\ntoilet\nclose\n").getBytes()));
		Pet cat = new Cat("PlayGameCatCleanToilet");
		Game.startGame(cat);

		assertEquals(2,cat.dirtiness);
	}
	@Test
	void PlayGameCatCleanBath() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nbath\nclose\n").getBytes()));
		Pet cat = new Cat("PlayGameCatCleanBath");
		Game.startGame(cat);

		assertEquals(2,cat.dirtiness);
	}
	@Test
	void PlayGameCatCleanGrooming() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\ngrooming\nclose\n").getBytes()));
		Pet cat = new Cat("PlayGameCatCleanGrooming");
		Game.startGame(cat);

		assertEquals(2,cat.dirtiness);
	}
	@Test
	void PlayGameCatCleanBack() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nback\nclose\n").getBytes()));
		Pet cat = new Cat("PlayGameCatCleanBath");
		Game.startGame(cat);

		assertEquals(5,cat.dirtiness);
	}
	@Test
	void PlayGameDogSleepingClose() throws IOException {//TODO how do i do this
		System.setIn(new ByteArrayInputStream(("sleep\nyes\nclose\n").getBytes()));
		Pet dog = new Dog("PlayGameDogSleepingClose");
		//Game.startGame(dog);
	}

	@Test
	void PlayGameDogSleepingWakeUp() throws IOException {
		System.setIn(new ByteArrayInputStream(("sleep\nyes\nclose\nwake up\nclose\n").getBytes()));
		Pet dog = new Dog("PlayGameDogSleepingWakeUp");
		Game.startGame(dog);
		assertEquals(3,dog.boredom);
		assertEquals(6,dog.hunger);
	}
	@Test
	void REVIVE() throws IOException {
		System.setIn(new ByteArrayInputStream(("clean\nbath\nclose\n").getBytes()));
		Pet dog = new Dog("REVIVE");

		dog.hunger = 10;
		dog.boredom = 10;
		dog.dirtiness = 10;
		dog.check_death();

		Game.startGame(dog);
		assertEquals(10,dog.dirtiness);
	}
	@Test
	void OverridePetTest() throws IOException, ClassNotFoundException {
		String name = "OverridePetTest";
		System.setIn(new ByteArrayInputStream(("cat\n" + name + "\n").getBytes()));
		Game.startNewGame();
		System.setIn(new ByteArrayInputStream(("dog\n" + name + "\n").getBytes()));
		Game.startNewGame();
		Pet survivor = Game.read_file(name);
		assertEquals("steak",survivor.favoriteFood.name);
	}
	@Test
	void readwriteFileTest() throws IOException, ClassNotFoundException {
		String name = "readwriteFileTest";
		Pet testdog = new Dog(name);
		Game.write_file(testdog);
		Pet pet = Game.read_file(name);
		assertEquals(name,pet.name);
		assertEquals("steak",pet.favoriteFood.name);
	}

	@Test
	void PlayGameDogSleepingBack() throws IOException {
		System.setIn(new ByteArrayInputStream(("sleep\nyes\nclose\nback\nclose\nwake up\nyes\nclose\n").getBytes()));
		Pet dog = new Dog("PlayGameDogSleepingBack");
		throw new org.opentest4j.AssertionFailedError(" Game is in infinite loop. this line can be removed, when problem is resolved");
		//Game.startGame(dog); // this statement creates infinite loop
	}
}
class FoodTest {
	@Test
	void TestApple(){
		String name = "apple";
		int energy = 1;
		Apple apple = new Apple();

		assertEquals(name, apple.name);
		assertEquals(energy, apple.energy);
	}
	@Test
	void TestBread(){
		String name = "bread";
		int energy = 3;
		Bread bread = new Bread();

		assertEquals(name, bread.name);
		assertEquals(energy, bread.energy);
	}
	@Test
	void TestSteak(){
		String name = "steak";
		int energy = 4;
		Steak steak = new Steak();

		assertEquals(name, steak.name);
		assertEquals(energy, steak.energy);
	}
	@Test
	void TestTuna(){
		String name = "tuna";
		int energy = 4;
		Tuna tuna = new Tuna();

		assertEquals(name, tuna.name);
		assertEquals(energy, tuna.energy);
	}
}

class TestToy {
	@Test
	void TestBall(){
		String name = "Ball";
		int fun = 3;
		Ball ball = new Ball();

		assertEquals(name, ball.name);
		assertEquals(fun, ball.fun);
	}
	@Test
	void TestStick(){
		String name = "Stick";
		int fun = 1;
		Stick stick = new Stick();

		assertEquals(name, stick.name);
		assertEquals(fun, stick.fun);
	}
	@Test
	void TestYarn(){
		String name = "Yarn";
		int fun = 2;
		Yarn yarn = new Yarn();

		assertEquals(name, yarn.name);
		assertEquals(fun, yarn.fun);
	}
}

class TestPet {
	@Test
	void TestDog(){
		Dog dog = new Dog("doggg");
		assertEquals("doggg", dog.name);
		assertEquals(new Steak().name, dog.favoriteFood.name);
		assertEquals(new Ball().name, dog.favoriteToy.name);
		assertEquals(5, dog.hunger);
		assertEquals(5, dog.boredom);
		assertEquals(5, dog.dirtiness);
	}
	@Test
	void TestCat(){
		Cat cat = new Cat("cattt");
		assertEquals("cattt", cat.name);
		assertEquals(new Tuna().name, cat.favoriteFood.name);
		assertEquals(new Yarn().name, cat.favoriteToy.name);
		assertEquals(5, cat.hunger);
		assertEquals(5, cat.boredom);
		assertEquals(5, cat.dirtiness);
	}
	@Test
	void TestFeed(){
		Cat cat = new Cat("cattt");
		cat.feed(new Tuna());
		assertEquals(1, cat.hunger);
		assertEquals(4, cat.boredom); 		//vergleich von pointer und nicht strings in if()
		assertEquals(7, cat.dirtiness);

		cat.feed(new Steak());
		assertEquals(0, cat.hunger);
		assertEquals(4, cat.boredom);
		assertEquals(9, cat.dirtiness);
	}
	@Test
	void TestClean(){
		Cat cat = new Cat("cattt");
		cat.clean("");					//why parameter??
		assertEquals(2, cat.dirtiness);
		assertEquals(5, cat.hunger);
		assertEquals(5, cat.boredom);
	}
	@Test
	void TestPlay(){
		Cat cat = new Cat("cattt");
		do {
			System.setIn(new ByteArrayInputStream(("left\nno\nclose\n").getBytes()));
			cat.play(new Yarn());
		} while (cat.boredom == 5);
		assertEquals(1, cat.boredom);
	}
}
class TestTime {
	@Test
	void TestTime(){
		Time time1 = new Time(5, 12, 55);

		assertEquals(5, time1.days_);
		assertEquals(12, time1.hours_);
		assertEquals(55, time1.minutes_);

		Time time2 = new Time(1, 25, 61);
		assertEquals(2, time2.days_);
		assertEquals(2, time2.hours_);
		assertEquals(1, time2.minutes_);
	}
}